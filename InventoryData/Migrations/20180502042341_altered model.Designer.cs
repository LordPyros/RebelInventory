// <auto-generated />
using InventoryData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace InventoryData.Migrations
{
    [DbContext(typeof(InventoryContext))]
    [Migration("20180502042341_altered model")]
    partial class alteredmodel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("InventoryData.Models.MilitaryAsset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount");

                    b.Property<string>("Description");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("ImageUrl");

                    b.Property<int?>("LocationId");

                    b.Property<string>("Name");

                    b.Property<int?>("RepairingId");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("RepairingId");

                    b.ToTable("MilitaryAssets");

                    b.HasDiscriminator<string>("Discriminator").HasValue("MilitaryAsset");
                });

            modelBuilder.Entity("InventoryData.Models.Repair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AmountUnderRepair");

                    b.HasKey("Id");

                    b.ToTable("Repairs");
                });

            modelBuilder.Entity("InventoryData.Models.StorageLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("StorageLocations");
                });

            modelBuilder.Entity("InventoryData.Models.Starship", b =>
                {
                    b.HasBaseType("InventoryData.Models.MilitaryAsset");

                    b.Property<bool>("HasShields");

                    b.Property<int>("NoOfConcussionMissileLaunchers");

                    b.Property<int>("NoOfIonCannons");

                    b.Property<int>("NoOfLasersCannons");

                    b.Property<int>("NoOfProtonTorpedoLaunchers");

                    b.ToTable("Starship");

                    b.HasDiscriminator().HasValue("Starship");
                });

            modelBuilder.Entity("InventoryData.Models.Vehicle", b =>
                {
                    b.HasBaseType("InventoryData.Models.MilitaryAsset");

                    b.Property<int>("HasShields")
                        .HasColumnName("Vehicle_HasShields");

                    b.Property<int>("MaxPassengers");

                    b.Property<int>("NoOfLasersCannons")
                        .HasColumnName("Vehicle_NoOfLasersCannons");

                    b.ToTable("Vehicle");

                    b.HasDiscriminator().HasValue("Vehicle");
                });

            modelBuilder.Entity("InventoryData.Models.Weapon", b =>
                {
                    b.HasBaseType("InventoryData.Models.MilitaryAsset");

                    b.Property<bool>("IsOneHanded");

                    b.Property<bool>("IsTripodMounted");

                    b.Property<bool>("IsTwoHanded");

                    b.ToTable("Weapon");

                    b.HasDiscriminator().HasValue("Weapon");
                });

            modelBuilder.Entity("InventoryData.Models.MilitaryAsset", b =>
                {
                    b.HasOne("InventoryData.Models.StorageLocation", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("InventoryData.Models.Repair", "Repairing")
                        .WithMany()
                        .HasForeignKey("RepairingId");
                });
#pragma warning restore 612, 618
        }
    }
}
